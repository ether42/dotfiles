#+title: Personal Emacs configuration

* Table of Contents :toc_3:
- [[#installing-packages][Installing packages]]
- [[#built-in--general-setup][Built-in & general setup]]
- [[#theming][Theming]]
- [[#other-functionalities][Other Functionalities]]
  - [[#completion][Completion]]
  - [[#white-spaces-handling][White spaces handling]]
  - [[#delimiters][Delimiters]]
  - [[#remembering-keybindings][Remembering keybindings]]
  - [[#moving-around][Moving around]]
  - [[#lighter-mode-line][Lighter mode-line]]
  - [[#line-numbering][Line numbering]]
  - [[#buffer-dimming][Buffer dimming]]
  - [[#code-rendering][Code rendering]]
- [[#social][Social]]
  - [[#irc][IRC]]
  - [[#slack][Slack]]
  - [[#feeds][Feeds]]
- [[#text-handling][Text handling]]
  - [[#org][Org]]
  - [[#markdown][Markdown]]
  - [[#gettext][gettext]]
  - [[#spell-checking][Spell checking]]
- [[#programming-languages-handling][Programming languages handling]]
  - [[#language-server-protocol][Language Server Protocol]]
  - [[#error-reporting][Error reporting]]
  - [[#agda][Agda]]
  - [[#c][C]]
  - [[#context][ConTeXt]]
  - [[#dart][Dart]]
  - [[#go][Go]]
  - [[#idris][Idris]]
  - [[#lua][Lua]]
  - [[#openscad][OpenSCAD]]
  - [[#python][Python]]
  - [[#rust][Rust]]
  - [[#shell][Shell]]
  - [[#yaml][YAML]]
  - [[#other][Other]]
    - [[#git][Git]]
    - [[#templates][Templates]]
    - [[#literal-programming][Literal programming]]

* Installing packages

The whole point of using another package manager is to be able to easily
fiddle with a custom version of a package.
[[https://github.com/raxod502/straight.el][straight.el]] is the current
alternative I'm using.
It is Git-based and keep only one copy of the installed packages.
Due to its design, it doesn't handle custom builds for now.
#+begin_src emacs-lisp
(setq straight-repository-branch "develop") ; use the development version

;; automatically install straight
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

I'll also use
[[https://github.com/jwiegley/use-package][use-package]] which seems to give
a better structure to Emacs' configuration.
#+begin_src emacs-lisp
(straight-use-package `(use-package :host github :repo "jwiegley/use-package"))

(require 'bind-key) ; use-package comes with way to define keybindings
#+end_src

* Built-in & general setup

Tell Emacs it should always prefer a more recent =.el= file instead of loading
a possibly out of date =.elc= file:
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

And that it should dump a stack trace (as it makes reporting easier,
disabled for now as too many operations will emit a trace):
#+begin_src
(setq debug-on-error t)
#+end_src

Convert the tab character to spaces:
#+begin_src emacs-lisp
(setq-default tab-width 2 ; tab size
              indent-tabs-mode nil) ; indent with spaces only
#+end_src

Tell Emacs to stop littering my environment by setting the directories
for backup, auto-saves, sessions and disabling interlock:
#+begin_src emacs-lisp
(setq backup-directory-alist `((".*" . ,temporary-file-directory))
      auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
      auto-save-list-file-prefix temporary-file-directory)

;; I'm not sure I see any point besides spamming the filesystem and
;; breaking some tools.
(setq create-lockfiles nil)
#+end_src

Quiet down Emacs a bit:
#+begin_src emacs-lisp
(menu-bar-mode -1) ; remove the f10 menu

(defalias 'yes-or-no-p 'y-or-n-p) ; replace annoying questions 'yes' or 'no' by their 'y' or 'n' counterparts

(set-display-table-slot standard-display-table 'wrap ?\ ) ; remove the \ for a wrapped line

(setq inhibit-startup-screen t) ; don't show the 'GNU Emacs' buffer
(defun display-startup-echo-area-message ()
  "Disable 'For information about GNU Emacs...' in the minibuffer.
`inhibit-startup-echo-area-message' must be set in the init
file to your username... Let's override the function instead...")
#+end_src

But I prefer more reporting when it's related to the point:
#+begin_src emacs-lisp
(line-number-mode 1) ; show line number in the mode-line
(column-number-mode 1) ; show column number in the mode-line
(global-hl-line-mode) ; highlight the line containing the cursor

(show-paren-mode 1) ; show matching parenthesis/bracket/...
#+end_src

While we are at it, enable mouse interaction in terminals so clicking and
scrolling may move the point:
#+begin_src emacs-lisp
(unless window-system
  (when (require 'mouse nil t)
    (xterm-mouse-mode t) ; that seems a bit too hard-coded
    (bind-keys ([mouse-4] . (lambda () (interactive) (scroll-down 1)))
               ([mouse-5] . (lambda () (interactive) (scroll-up 1))))))
#+end_src

Some window-related configuration:
#+begin_src emacs-lisp
(setq split-width-threshold 1) ; split horizontally by default

(windmove-default-keybindings) ; default keybindings for windmove: shift + arrows
#+end_src

Other unrelated configurations:
#+begin_src emacs-lisp
(setq dired-dwim-target t) ; 'commander' interface for dired

(setq vc-handled-backends nil) ; disable source control handling

(setq sort-fold-case t) ; case-insensitive sort-lines

;; recursive minibuffer
(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode 1)
#+end_src

* Theming

Here, I keep some of the themes I used.
Since they are =deferred= they won't even be loaded.

But first, fix Emacs' behavior and make it unload any theme before loading
another one:
#+begin_src emacs-lisp
;; http://www.bartuka.com/pages-output/personal-emacs-configuration/
(defadvice load-theme (before theme-dont-propagate activate)
  "Disable all theme effects before enabling new ones."
  (mapc #'disable-theme custom-enabled-themes))
#+end_src

#+begin_src emacs-lisp
(use-package monokai-theme
  :defer t
  :straight (:host github :repo "oneKelvinSmith/monokai-emacs"))

(use-package tao-yin-theme
  :defer t
  :straight (tao-theme :host github :repo "11111000000/tao-theme-emacs")
  :init
  (setq tao-theme-use-sepia nil) ; original behavior
  :config
  ;; override the mode-line{,-inactive} faces to match vertical-border
  (dolist (face '(mode-line mode-line-inactive))
    (set-face-attribute face nil
                        :foreground (face-attribute 'vertical-border :foreground nil t)
                        :background (face-attribute 'vertical-border :background nil t))))

(use-package zenburn-theme
  :defer t
  :straight (:host github :repo "bbatsov/zenburn-emacs")
  :init
  (setq zenburn-override-colors-alist '(("zenburn-bg" . "#1f1f1f")))) ; darker background
#+end_src

And load my current theme (it's important to do it early as later configuration
may use or copy faces provided by the theme):
#+begin_src emacs-lisp
(load-theme 'tao-yin t)
#+end_src

* Other Functionalities

** Completion

Many packages extend [[http://company-mode.github.io/][Company]] by adding specific back-ends, so we'll rely on it
to provide completion:
#+begin_src emacs-lisp
(use-package company
  :straight (:host github :repo "company-mode/company-mode")
  :hook (after-init . global-company-mode)
  :bind
  (:map company-active-map
        ;; by default company use arrows, making me switch from these two
        ;; they can still be used and C-g will kill the popup
        ("C-p" . company-select-previous-or-abort)
        ("C-n" . company-select-next-or-abort))
  :config
  (setq company-dabbrev-downcase nil ; dabbrev complete case sensitive
        company-idle-delay 0 ; no delay before showing completion
        company-minimum-prefix-length 2 ; start completing rapidly
        company-tooltip-align-annotations t)) ; align annotations to the right
#+end_src

There is the built-in Ido, but it requires to be extended by multiple
packages (like Smex or ido-vertical-mode).
Instead I rely on [[https://github.com/abo-abo/swiper][Ivy]].

Use =C-M-j= to force an input not present in completions
(similar to Ido's =C-f=), or select what's in the prompt.

#+begin_src emacs-lisp
;; ivy makes use of flx if it's installed
;; this provides way better matching, for example
;; M-x quer will rightfully display query-replace as the top choice
(use-package flx
  :defer t
  :straight (:host github :repo "lewang/flx"))

;; provides ivy, swiper & counsel
;; to get swiper as a replacement of isearch, ivy-yank-word
;; should probably be reassigned to C-s
(use-package ivy
  :straight (:host github :repo "abo-abo/swiper")
  :hook (after-init . ivy-mode)
  :init
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))) ; similar to ido-enable-flex-matching
  :config
  (setq ivy-use-selectable-prompt t)
  :bind
  (:map ivy-minibuffer-map
        ;; ido style selection
        ("C-j" . ivy-immediate-done)
        ("RET" . ivy-alt-done)))
#+end_src

** White spaces handling

Correct white space handling is important (getting cleaner diffs for example).
However, Emacs' =whitespace-mode= seems to have some problems (as an example,
its faces mess up with the text's properties in Circe).
Fortunately, [[https://github.com/glasserc/ethan-wspace][ethan-wspace]] aims to do much better.

#+begin_src emacs-lisp
(use-package ethan-wspace
  :straight (:host github :repo "glasserc/ethan-wspace")
  :config
  (setq mode-require-final-newline nil) ; don't automatically add final newlines
  (global-ethan-wspace-mode 1))
#+end_src

It's nice to be able to display all white spaces sometimes and
=whitespace-mode= is still the best here:

#+begin_src emacs-lisp
(when (require 'whitespace nil t)
  ; the default value of whitespace-style and whitespace-line-column seems good enough
  (global-set-key (kbd "<f12>") 'whitespace-mode))
#+end_src

** Delimiters

Most of the time, brackets, parentheses, braces, etc. are paired together.
=show-paren-mode= helps by showing the matching one but it's sometimes a bit
too cumbersome to use as you have to move the point.
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] helps by coloring each pair.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :straight (:host github :repo "Fanael/rainbow-delimiters")
  :hook ((prog-mode . rainbow-delimiters-mode)
         (text-mode . rainbow-delimiters-mode)))
#+end_src

** Remembering keybindings

[[https://github.com/justbur/emacs-which-key][which-key]] will display
a pop-in during key combinations.

#+begin_src emacs-lisp
(use-package which-key
  :straight (:host github :repo "justbur/emacs-which-key")
  :config
  (setq which-key-separator " ")
  (which-key-mode))
#+end_src

** Moving around

Jumping around between words and buffers is easy with
[[https://github.com/abo-abo/avy][Avy]].

Use =C-o $letter $characters= to jump to the first letter of a word.
The characters are directly overlayed on the words.

Use =M-o [x (delete) | m (swap) | ...] $index= to jump to/act on a buffer.
The index appears in the top left corner.

#+begin_src emacs-lisp
(use-package avy
  :straight (:host github :repo "abo-abo/avy")
  :bind (("C-o" . avy-goto-word-or-subword-1))) ; override open-line default binding

;; despite the name, it's avy-based
(use-package ace-window
  :straight (:host github :repo "abo-abo/ace-window")
  :bind (("M-o" . ace-window)) ; override facemenu default binding
  :config
  (setq aw-background nil)) ; don't remove colors
#+end_src

And to move regions or lines (Magit-style):
#+begin_src emacs-lisp
(use-package move-text
  :straight (:host github :repo "emacsfodder/move-text")
  :bind (("M-n" . move-text-down)
         ("M-p" . move-text-up)))
#+end_src

** Lighter mode-line

[[https://github.com/tautologyclub/feebleline][Feebleline]] completely
disables the standard mode-line and replaces it with a minimalist version,
displayed right in the minibuffer when it's idle.

#+begin_src emacs-lisp
(defun ether--feebleline-circe-tracking-buffers ()
  "Circe maintains a list of buffers with activity.
Join them together as they are already propertized in case of highlight."
  (defun filter (buffer)
    (text-property-any 0 1 'face 'circe-highlight-nick-face buffer))
  (when (boundp 'tracking-buffers)
    (string-join (append ; put the highlighted buffers first
                  (sort (seq-filter #'filter tracking-buffers) 'string-collate-lessp)
                  (sort (seq-filter (lambda (buffer) (not (filter buffer))) tracking-buffers) 'string-collate-lessp))
                 " ")))

(defun ether--feebleline-major-mode ()
  (string-trim-right (prin1-to-string major-mode) "-mode"))

;; see also https://github.com/11111000000/taoline, by the creator of tao-theme
(use-package feebleline
  :straight (:host github :repo "tautologyclub/feebleline")
  :config
  (setq feebleline-msg-functions
        '((feebleline-line-number :post "")
          (feebleline-column-number :pre ",")
          (ether--feebleline-major-mode :face feebleline-git-face)
          (feebleline-file-directory :face feebleline-dir-face :post "")
          (feebleline-file-or-buffer-name :face font-lock-keyword-face :post "")
          (feebleline-file-modified-star :face feebleline-warning-face :post "")
          (ether--feebleline-circe-tracking-buffers :face nil :pre " ")))
  ;; enable feebleline
  (feebleline-mode 1)
  ;; but still allow mode line in some cases for readability
  ;; https://emacs.stackexchange.com/questions/30513/making-a-variable-window-local
  ;; https://github.com/tautologyclub/feebleline/issues/24
  (add-hook 'window-configuration-change-hook
            (lambda ()
              (when (bound-and-true-p feebleline-mode)
                (walk-windows (lambda (window) ; reset the mode line of each buffer
                                (with-current-buffer (window-buffer window)
                                  (setq mode-line-format nil)))
                              0) ; don't include minibuffer
                (walk-windows (lambda (window) ; and set the mode line when necessary
                                (with-current-buffer (window-buffer window)
                                  ;; {frame,window}-edges functions return (x1 y1 x2 y2)
                                  ;; then check if the current buffer (which may be displayed on mutltiple windows)
                                  ;; doesn't sit on top of the minibuffer
                                  ;; this isn't perfect but unfortunately, the mode-line-format is buffer-local
                                  (when (/= (nth 1 (window-edges (minibuffer-window)))
                                            (nth 3 (window-edges window)))
                                    (setq mode-line-format "%-"))))
                              0))))) ; don't include minibuffer
#+end_src

** Line numbering

*Disabled for now.*

#+begin_src
(when (boundp 'display-line-numbers) ; introduced in emacs 26
  (set-face-attribute 'line-number-current-line nil
                      ;; highlight the line current line number
                      :foreground (face-attribute 'font-lock-keyword-face :foreground nil t)
                      ;; highlight the margin with the same line highlighting
                      :background (when (bound-and-true-p global-hl-line-mode)
                                    (face-attribute 'hl-line :background nil t)))
  (global-display-line-numbers-mode))
#+end_src

** Buffer dimming

*Disabled for now.*

Slightly dim the inactive buffers:
#+begin_src
(defun ether--dim-color (rgb percent)
  "Dim the RGB color expressed in the format #rrggbb by PERCENT."
  ;; looks like there is no color-hex-to-rgb
  (let ((r (/ (float (string-to-number (substring rgb 1 3) 16)) (float 255)))
        (g (/ (float (string-to-number (substring rgb 3 5) 16)) (float 255)))
        (b (/ (float (string-to-number (substring rgb 5 7) 16)) (float 255))))
    (apply 'color-rgb-to-hex
           (nconc (apply 'color-hsl-to-rgb
                         (apply 'color-darken-hsl (nconc (color-rgb-to-hsl r g b) `(,percent))))
                  '(2)))))

;; https://github.com/mina86/auto-dim-other-buffers.el/issues/16
(use-package auto-dim-other-buffers
  :straight (:host github :repo "mina86/auto-dim-other-buffers.el")
  :hook (after-init . auto-dim-other-buffers-mode)
  :config
  (set-face-attribute 'auto-dim-other-buffers-face nil
                      ;; :foreground (ether--dim-color (face-attribute 'default :foreground nil t) 5)
                      :background (ether--dim-color (face-attribute 'default :background nil t) 5)))
#+end_src

** Code rendering

Sometimes, it's nice to show properly rendered code. Projects like
[[http://pygments.org/][Pygments]] exist but it would be preferable to use your
pretty Emacs configuration.
[[https://github.com/hniksic/emacs-htmlize][htmlize]] does just that and
will export a buffer to HTML, keeping your theme and other settings.

Use =M-x htmlize-buffer=.

Or =C-SPC= two times then move the point to the end of the region then
=M-x htmlize-region= (so you don't render the region selection overlay).

The below configuration even allow to call Emacs like so:

#+begin_src shell
emacs --htmlize path/to/file # which will output path/to/file.html
#+end_src

#+begin_src emacs-lisp
(use-package s :defer t) ; for s-suffix?

(defun ether--htmlize-file (switch)
  "`htmlize-file' seems to have some issues, here is a simpler one."
  (ignore switch)
  (condition-case out
      (progn
        (require 'htmlize)
        (let* ((source (pop command-line-args-left))
               (destination (htmlize-make-file-name (file-name-nondirectory source))))
          (find-file-existing source)
          (with-current-buffer (htmlize-buffer-1)
            (write-region (point-min) (point-max) destination))
          (kill-emacs 0)))
    (error (progn
             (princ out #' external-debugging-output) ; may not be shown due to termcaps, use a redirection
             (kill-emacs 1)))))

(use-package htmlize
  :defer t
  :straight (:host github :repo "hniksic/emacs-htmlize")
  :init
  (add-to-list 'command-switch-alist '("--htmlize" . ether--htmlize-file))
  :config
  ;; use the Iosevka font if available (ligatures may be nice for displayed code)
  ;; requires fontconfig, works on Linux and macOS
  ;; use %{=unparse} format to see all options
  ;; regular Iosevka instead of Iosevka Term seems to produce some irregularities
  ;; for example let-alist and use-package seems to be slightly larger
  (let* ((fc-match "fc-match -f '%{file}' 'Iosevka Term:style=Regular'")
         (path (shell-command-to-string fc-match)))
    (when (s-suffix? ".ttf" path :ignore-case) ; Firefox doesn't like .ttc
      (setq htmlize-head-tags (format "    <style type=\"text/css\">
      @font-face {
        font-family: Iosevka;
        src: url(data:font/ttf;base64,%s) format('truetype');
      }
      pre {
        font-family: Iosevka;
        font-size: 10pt;
      }
    </style>
"
                                      (base64-encode-string (with-temp-buffer (insert-file-contents path) (buffer-string)) t)))))
  :hook ((htmlize-before . (lambda ()
                             ;; disable some modes that may influence rendering
                             ;; the original buffer is protected, no need to restore
                             ;; flycheck handling (use special faces that are not nicely rendered)
                             (when (bound-and-true-p flycheck-mode) (flycheck-mode))
                             ;; disable current line highlighting (both a function and a variable)
                             (when (bound-and-true-p global-hl-line-mode) (global-hl-line-unhighlight))
                             ;; TODO: lsp stuff
                             ;; (sit-for 3) ; allow to see the changes made to the buffer
                             ))))
#+end_src

* Social

** IRC

[[https://github.com/jorgenschaefer/circe][Circe]] is an alternative to
built-in IRC clients.

#+begin_src emacs-lisp
(setq circe-logging nil) ; small hack to avoid a warning because Circe doesn't expect this variable
(defun ether--lui-selective-logging ()
  "When a network in `circe-network-options' set the `:logging' property to
a truthy value, enable logging for it."
  ;; see circe-chat-mode and enable-lui-logging-globally
  (when (plist-get (cdr (assoc (plist-get lui-logging-format-arguments :network)
                               circe-network-options))
                   :logging)
    (enable-lui-logging)))

(use-package circe
  :defer t
  :straight (:host github :repo "jorgenschaefer/circe")
  :hook ((circe-mode . (lambda () (setq-local right-margin-width 5)))
         (lui-mode . ether--lui-selective-logging))
  :config
  ;; colorize nicks
  (require 'circe-color-nicks)
  (enable-circe-color-nicks)

  ;; logging configuration
  (require 'lui-logging)
  (setq lui-logging-directory "~/.logs" ; default
        lui-logging-file-format "irc/{network}/{buffer}.txt"
        lui-logging-format "[%F %T %Z] {text}")
  ;; don't enable it by default for privacy reasons
  ;; (enable-lui-logging-globally)
  ;; make sure there is no display difference between others and me
  (setq circe-format-self-say circe-format-say
        circe-format-self-action circe-format-action)

  (setq lui-flyspell-p t) ; enable spell checking

  (setq lui-fill-type nil ; no text wrapping
        lui-time-stamp-format "%H:%M"
        lui-time-stamp-position 'right-margin ; see above hook
        circe-format-server-topic "*** Topic change by {nick} ({userhost}): {topic-diff}") ; topic-diff instead of new-topic

  ;; log a new day
  (require 'circe-new-day-notifier)
  (enable-circe-new-day-notifier)
  (add-to-list 'circe-format-not-tracked 'circe-new-day-notifier-format-message) ; don't track day notifications

  ;; anonymization
  (setq circe-default-quit-message ""
        circe-default-part-message ""
        circe-default-realname circe-default-nick)) ; avoid real identity leak from user-full-name
#+end_src

You'll probably need to setup it like so:
#+begin_src
(setq circe-network-options '(
  ("freenode"
   :host "irc.freenode.net"
   :port 6697
   :tls t
   :nick "USERNAME"
   :nickserv-nick "USERNAME"
   :nickserv-password "PASSWORD"
   :nickserv-mask "^NickServ!NickServ@services\\.$"
   :nickserv-identify-challenge "\C-b/msg\\s-NickServ\\s-identify\\s-<password>\C-b"
   :nickserv-identify-command "PRIVMSG NickServ :IDENTIFY {nick} {password}"
   :nickserv-identify-confirmation "^You are now identified for .*\\.$"
   :nickserv-ghost-command "PRIVMSG NickServ :GHOST {nick} {password}"
   :nickserv-ghost-confirmation "has been ghosted\\.$\\|is not online\\.$"
   :channels (:after-auth "#channel1" "#channel2"))
  ("mozilla"
   :host "irc.mozilla.org"
   :port 6697
   :tls t
   :nick "USERNAME"
   :channels ("#channel1" "#channel2"))
))
#+end_src

** [[https://slack.com/][Slack]]

*Disabled for now.*

#+begin_src
(use-package slack
  :defer t
  :straight (:host github :repo "yuya373/emacs-slack")
  :hook (slack-mode . (lambda () (setq-local right-margin-width 5)))
  :config
  ;; timestamp setup, same as in circe.el
  (setq lui-time-stamp-format "%H:%M"
        lui-time-stamp-position 'right-margin))
#+end_src

You'll probably need to setup it like so:
#+begin_src
(slack-register-team
  :name "team"
  :default t
  :client-id "_X_ID"
  :client-secret "PASSWORD"
  :token "XOXS-"
  :full-and-display-names t)
#+end_src

The easiest way to fill above information is to open the browser's network
tab and search for =_x_id= & =xoxs-=.
Or you may want to create an application to access the API.

** Feeds

Follow RSS and Atom feeds.
You'll have to set =elfeed-feeds= to a list of feeds.

#+begin_src emacs-lisp
(use-package elfeed
  :defer t
  :straight (:host github :repo "skeeto/elfeed"))
#+end_src

* Text handling

** [[https://orgmode.org/][Org]]

I use the embedded Org for now.

#+begin_src emacs-lisp
(setq org-replace-disputed-keys t) ; windmove keybindings conflict
#+end_src

Since the whole point of this document is to be readable on GitHub, let's
automatically generate a table of contents:
#+begin_src emacs-lisp
(use-package toc-org
  :straight (:host github :repo "snosov1/toc-org")
  :hook (org-mode . toc-org-enable))
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :straight (:host github :repo "jrblevin/markdown-mode")
  :bind (:map markdown-mode-map ; clear override of move-text
         ("M-n" . nil)
         ("M-p" . nil)))
#+end_src
** gettext

On Debian, install =gettext-el=.

#+begin_src emacs-lisp
(when (require 'po-mode nil t))
#+end_src

** Spell checking

You'll need to install [[https://hunspell.github.io/][Hunspell]].

Dictionaries may or may not be provided by your distribution.
On Debian, dictionaries are available via =hunspell-*= packages, else,
retrieve =.aff= & =.dic= files here:
- =en_*=: http://wordlist.aspell.net/dicts/
- =fr-*=: https://grammalecte.net/download.php?prj=fr

Setup is a bit tricky:
#+begin_src emacs-lisp
;; http://emacs.stackexchange.com/a/21379

(defconst ether--spellchecker "hunspell")
(defconst ether--languages "fr-toutesvariantes,en_US")

(if (and (>= emacs-major-version 25)
         (executable-find ether--spellchecker)
         (require 'ispell nil t))
    (progn
      (setq ispell-program-name ether--spellchecker)
      (setq ispell-dictionary ether--languages)
      ;; the following may crash with:
      ;;   Wrong type argument: stringp, nil
      ;; if hunspell isn't able to find dictionaries
      ;;   export LC_ALL=en_US.UTF-8
      ;;   export DICPATH=~/Library/Spelling
      ;; use hunspell -D to check hunspell's environment
      (ispell-set-spellchecker-params)
      (ispell-hunspell-add-multi-dic ether--languages)
      ;; it significantly slows down emacs, so no prog-mode-hook for now
      ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
      ;; (add-hook 'text-mode-hook 'ispell-buffer)
      ;; (add-hook 'prog-mode-hook 'ispell-comments-and-strings)
      ;; (add-hook 'text-mode-hook 'flyspell-buffer)
      (add-hook 'text-mode-hook 'flyspell-mode))
  (message "Unable to load ispell due to missing dependency"))
#+end_src

If not run automatically, use =M-x flyspell-{buffer,mode}=.
Use =M-$= to correct an highlighted word.

It may cause significant slow down.

* Programming languages handling

** [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]

LSP is a really nice abstraction and avoid to clutter your Emacs configuration
because most of the programming languages now have a server implementing this
protocol. Its means you'll have a consistent experience without much need to
produce a (sometimes complex) language-specific configuration.

#+begin_src emacs-lisp
(use-package lsp-mode
  :defer t
  :commands lsp
  :straight (:host github :repo "emacs-lsp/lsp-mode")
  :init (setq lsp-auto-guess-root t)
  :config
  (setq lsp-enable-on-type-formatting nil))

(use-package lsp-ui
  :commands lsp-ui-mode
  :straight (:host github :repo "emacs-lsp/lsp-ui")
  :config
  (setq lsp-ui-sideline-ignore-duplicate t)) ; duplicate symbols can quickly grow on multiple lines

(use-package company-lsp
  :commands company-lsp
  :straight (:host github :repo "tigersoldier/company-lsp")
  :config
  (push 'company-lsp company-backends)
  ;; requires yasnippet, used to complete arguments
  ;; may need to setup some functions, see company-lsp--fallback-snippet
  (setq company-lsp-enable-snippet t))
#+end_src

** Error reporting

[[https://flycheck.readthedocs.io][Flycheck]] aims to replace Emacs' built-in Flymake. It supports many language and
checkers out the box and offers a more complete experience with LSP.

#+begin_src emacs-lisp
(use-package flycheck
  :straight (:host github :repo "flycheck/flycheck")
  :hook (prog-mode . flycheck-mode)
  :config
  (setq flycheck-checker-error-threshold nil ; don't stop after a large number of errors
        flycheck-temp-prefix ".flycheck")) ; hide temporary files
#+end_src

** [[http://wiki.portal.chalmers.se/agda/pmwiki.php][Agda]]

Nothing special here, the mode should be installed alongside the compiler.

#+begin_src emacs-lisp
(when (require 'agda2 nil t))
#+end_src

** C

Style configuration:
#+begin_src emacs-lisp
(c-set-offset 'case-label '+) ; indent case in switch
(setq c-basic-offset tab-width
      c-default-style "k&r")
#+end_src

LSP configuration of
[[https://github.com/cquery-project/emacs-cquery][cquery]]:
#+begin_src emacs-lisp
;; you'll need to build cquery
;; https://github.com/cquery-project/cquery/wiki/Emacs
(use-package cquery
  :straight (:host github :repo "cquery-project/emacs-cquery")
  :init (require 'cl)) ; cl-find-if aliased to find-if

(add-hook 'c-mode-hook #'lsp)
#+end_src

Previously I tried XCscope, cmake-ide, RTags, clangd, etc.
Nothing offered a more reliable experience but you'll have to generate a
=compile_commands.json=.

Which is easy with [[https://github.com/Kitware/CMake][CMake]],
so here is the official mode:
#+begin_src emacs-lisp
;; straight not supporting shallow clones,
;; use a mirror instead of the official cmake repository
;; mainly for cmake-help*
(use-package cmake-mode
  :straight (:host github :repo "emacsmirror/cmake-mode"))
#+end_src

To format source code relying on
[[https://clang.llvm.org/docs/ClangFormat.html][clang-format]]:
#+begin_src emacs-lisp
(when (require 'clang-format nil t)
  ;; (global-set-key [C-M-tab] 'clang-format-region)
  )
#+end_src

** [[https://wiki.contextgarden.net/][ConTeXt]]

I currently don't like the existing
[[https://www.gnu.org/software/auctex/][AUCTeX]] support and the default
=plain-tex-mode= doesn't fit with ConTeXt, so the setup is rather minimal...

#+begin_src emacs-lisp
(defconst ether--context-mode-syntax-table
  (let ((st (make-syntax-table)))
    (modify-syntax-entry ?% "<" st)
    (modify-syntax-entry ?\n ">" st)
    st))

(define-derived-mode ether--context-mode
  text-mode ; so spell checking works (but it also checks commands...)
  "ConTeXt"
  (setq-local comment-start "%"))

(add-to-list 'auto-mode-alist '("\\.tex$" . ether--context-mode))
#+end_src

** [[https://www.dartlang.org/][Dart]]

It works nicely with [[https://flutter.io/][Flutter]], for a full
terminal-based setup.

You'll need to install the language server with:
#+begin_src shell
pub global activate dart_language_server
#+end_src

#+begin_src emacs-lisp
(use-package dart-mode
  :straight (:host github :repo "bradyt/dart-mode")
  :hook ((dart-mode . flycheck-mode) ; flycheck isn't enabled automatically otherwise
         (dart-mode . lsp)))
#+end_src

** [[https://golang.org/][Go]]

#+begin_src emacs-lisp
(use-package go-mode
  :straight (:host github :repo "dominikh/go-mode.el")
  :hook (go-mode . lsp)
  :config
  ;; https://github.com/dominikh/go-mode.el/pull/212
  (modify-syntax-entry ?_  "_" go-mode-syntax-table))
#+end_src

** [[https://www.idris-lang.org/][Idris]]

No LSP here, as it has its own mode to handle the REPL, interactive proofs,
etc.

#+begin_src emacs-lisp
(use-package idris-mode
  :defer t
  :straight (:host github :repo "idris-hackers/idris-mode")
  :config
  (setq idris-repl-banner-functions nil)) ; disable startup animation
#+end_src

** [[https://www.lua.org/][Lua]]

Mainly for syntax highlighting and indentation.

#+begin_src emacs-lisp
(use-package lua-mode
  :defer t
  :straight (:host github :repo "immerrr/lua-mode")
  :config
  (setq lua-indent-level tab-width))
#+end_src

** [[https://www.openscad.org/][OpenSCAD]]

Mainly for syntax highlighting and indentation.

#+begin_src emacs-lisp
;; straight not supporting shallow clones,
;; use a mirror instead of the official OpenSCAD repository
;; it seems to be lagging a bit behind?
(use-package scad-mode
  :straight (:host github :repo "emacsmirror/scad-mode"))
#+end_src

** [[https://www.python.org/][Python]]

You'll need to install
[[https://github.com/palantir/python-language-server][Palantir's language server]]
with:
#+begin_src shell
pip install -U python-language-server[all]
#+end_src

There is also
[[https://github.com/Microsoft/python-language-server][Microsoft's language server]]
and
[[https://github.com/andrew-christianson/lsp-python-ms][this package]]
which I have not tested yet (Palantir's server is a bit rough around the
edges at times).

#+begin_src emacs-lisp
(add-hook 'python-mode-hook #'lsp)
#+end_src

Flycheck should automatically use the installed linters, like
[[http://www.mypy-lang.org/][mypy]] (however this
[[https://github.com/flycheck/flycheck/pull/1486][issue]]
isn't fixed yet).

** [[https://www.rust-lang.org/][Rust]]

#+begin_src emacs-lisp
(use-package rust-mode
  :defer t
  :straight (:host github :repo "rust-lang/rust-mode")
  :hook ((rust-mode . lsp))
  :config
  (add-to-list 'auto-mode-alist '("\\.rs$" . rust-mode))
  (setq rust-indent-offset tab-width))

(use-package flycheck-rust
  :straight (:host github :repo "flycheck/flycheck-rust")
  :hook (flycheck-mode . flycheck-rust-setup))
#+end_src

** Shell

Well, nothing much here as I don't know of any viable checker that
can correctly handle all of Bash's tricks.

#+begin_src emacs-lisp
(setq sh-basic-offset tab-width)
(add-hook 'sh-mode-hook (lambda () (sh-electric-here-document-mode 0))) ; disable the annoying heredoc EOF completion
#+end_src

** [[https://yaml.org/][YAML]]

I only want comments to work out of the box.

#+begin_src emacs-lisp
(defconst ether--yaml-mode-syntax-table
  (let ((st (make-syntax-table)))
    (modify-syntax-entry ?# "<" st)
    (modify-syntax-entry ?\n ">" st)
    st))

(define-derived-mode ether--yaml-mode fundamental-mode "YAML"
  (setq-local comment-start "#"))

(add-to-list 'auto-mode-alist '("\\.ya?ml$" . ether--yaml-mode))
#+end_src

** Other

*** Git

[[https://github.com/magit/magit][Magit]] is the go-to Git wrapper in Emacs,
sometimes used as a dependency.

#+begin_src emacs-lisp
(use-package magit
  :defer t
  :straight (:host github :repo "magit/magit"))
#+end_src

Not strictly related to Git but still building on it for most of the default
features, Projectile allows to quickly jump between files of a repository:

#+begin_src emacs-lisp
(use-package projectile
  :hook (after-init . projectile-mode)
  :straight (:host github :repo "bbatsov/projectile")
  :bind (:map projectile-mode-map ("C-c p" . projectile-command-map))
  :config
  (setq projectile-completion-system 'ivy)) ; instead of using ido
#+end_src

You should probably set =projectile-project-search-path=.

*** Templates

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system,
sometimes used as a dependency.

#+begin_src emacs-lisp
(use-package yasnippet
  :straight (:host github :repo "joaotavora/yasnippet")
  :config
  (setq yas-verbosity 0)
  (yas-global-mode 1))
#+end_src

*** Literal programming

I started writing this file using
[[https://github.com/phillord/lentic][lentic]]
but now use [[https://github.com/polymode/polymode][polymode]]:
#+begin_src emacs-lisp
(use-package poly-markdown
  :straight (:host github :repo "polymode/poly-markdown")
  :bind (:map polymode-mode-map ; clear override of move-text
         ("M-n" . nil)))

(use-package poly-org
  :straight (:host github :repo "polymode/poly-org"))

(use-package poly-rst
  :straight (:host github :repo "polymode/poly-rst"))
#+end_src
